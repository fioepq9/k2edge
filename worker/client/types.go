// Code generated by goctl. DO NOT EDIT.
package client

type VersionResponse struct {
	Version string `json:"version"`
}

type CreateContainerRequest struct {
	ContainerName string          `json:"container_name"`
	Config        ContainerConfig `json:"config"`
}

type CreateContainerResponse struct {
	ID string `json:"id"`
}

type RemoveContainerRequest struct {
	ID            string `json:"id"`
	RemoveVolumes bool   `json:"remove_volumnes,optional"`
	RemoveLinks   bool   `json:"remove_links,optional"`
	Force         bool   `json:"force"`
}

type StopContainerRequest struct {
	ID      string `json:"id"`
	Timeout int    `json:"timeout,optional"`
}

type StartContainerRequest struct {
	ID            string `json:"id"`
	CheckpointID  string `json:"checkpoint_id,optional"`
	CheckpointDir string `json:"checkpoint_dir,optional"`
}

type ContainerStatusRequest struct {
	ID string `form:"id"`
}

type ContainerStatusResponse struct {
	Status interface{} `json:"status"`
}

type ListContainersRequest struct {
	Size   bool   `form:"size,optional"`
	All    bool   `form:"all,optional"`
	Latest bool   `form:"latest,optional"`
	Since  string `form:"since,optional"`
	Before string `form:"before,optional"`
	Limit  int    `form:"limit,optional"`
}

type ListContainersResponse struct {
	Containers interface{} `json:"containers"`
}

type ExecRequest struct {
	Container string     `json:"container"`
	Config    ExecConfig `json:"config,optional"`
}

type ExecConfig struct {
	User         string   `json:"user"`          // User that will run the command
	Privileged   bool     `json:"privileged"`    // Is the container in privileged mode
	Tty          bool     `json:"tty"`           // Attach standard streams to a tty.
	AttachStdin  bool     `json:"attach_stdin"`  // Attach the standard input, makes possible user interaction
	AttachStderr bool     `json:"attach_stderr"` // Attach the standard error
	AttachStdout bool     `json:"attach_stdout"` // Attach the standard output
	Detach       bool     `json:"detach"`        // Execute in detach mode
	DetachKeys   string   `json:"detach_keys"`   // Escape keys for detach
	Env          []string `json:"env"`           // Environment variables
	WorkingDir   string   `json:"working_dir"`   // Working directory
	Cmd          []string `json:"cmd"`           // Execution commands and args
}

type AttachRequest struct {
	Container string       `json:"container"`
	Config    AttachConfig `json:"config,optional"`
}

type AttachConfig struct {
	Stream     bool   `json:"stream"`
	Stdin      bool   `json:"stdin"`
	Stdout     bool   `json:"stdout"`
	Stderr     bool   `json:"stderr"`
	DetachKeys string `json:"detach_keys"`
	Logs       bool   `json:"logs"`
}

type Metadata struct {
	Namespace string `json:"namespace"`
	Kind      string `json:"kind"`
	Name      string `json:"name"`
}

type Error struct {
	Todo string `json:"todo"`
}

type ContainerStatus struct {
	Todo string `json:"todo"`
}

type Container struct {
	Metadata        Metadata        `json:"metadata"`
	ContainerConfig ContainerConfig `json:"container_template"`
	Status          string          `json:"status"`
	ContainerID     string          `json:"container_id"`
}

type ContainerConfig struct {
	Image   string        `json:"image"`
	Node    string        `json:"node,optional"`
	Command string        `json:"command,optional"`
	Args    []string      `json:"args,optional"`
	Expose  []ExposedPort `json:"expose,optional"`
	Env     []string      `json:"env,optional"`
}

type ExposedPort struct {
	Port     int64  `json:"port"`
	Protocol string `json:"protocol"`
	HostPort int64  `json:"host_port"`
}

type JobConfig struct {
	Todo string `json:"todo"`
}

type JobStatus struct {
	Todo string `json:"todo"`
}

type Job struct {
	Metadata              Metadata        `json:"metadata"`
	Node                  string          `json:"node"`
	Containers            []string        `json:"containers"`
	Completions           int64           `json:"completions"`
	BackoffLimit          int64           `json:"backoff_limit"`
	ActiveDeadlineSeconds int64           `json:"active_deadline_seconds"`
	StartTime             string          `json:"start_time"`
	CompletionTime        string          `json:"completion_time"`
	Active                int64           `json:"active"`
	Failed                int64           `json:"failed"`
	Succeeded             int64           `json:"succeeded"`
	Status                string          `json:"status"`
	Template              ContainerConfig `json:"template"`
}

type CronJobConfig struct {
	Todo string `json:"todo"`
}

type CronJobStatus struct {
	Todo string `json:"todo"`
}

type CronJob struct {
	Metadata Metadata      `json:"metadata"`
	Config   CronJobConfig `json:"config"`
	Status   CronJobStatus `json:"status"`
}

type DeploymentConfig struct {
	Todo string `json:"todo"`
}

type DeploymentStatus struct {
	Todo string `json:"todo"`
}

type Deployment struct {
	Metadata Metadata         `json:"metadata"`
	Config   DeploymentConfig `json:"config"`
	Status   DeploymentStatus `json:"status"`
}

type TokenConfig struct {
	Todo string `json:"todo"`
}

type TokenStatus struct {
	Todo string `json:"todo"`
}

type Token struct {
	Metadata Metadata    `json:"metadata"`
	Config   TokenConfig `json:"config"`
	Status   TokenStatus `json:"status"`
}

type Node struct {
	Metadata     Metadata `json:"metadata"`
	Roles        []string `json:"roles"`
	BaseURL      string   `json:"base_url"`
	Status       string   `json:"status"`
	RegisterTime int64    `json:"register_time"`
}

type Command struct {
	Todo string `json:"todo"`
}

type Namespace struct {
	Kind       string `json:"kind"`
	Name       string `json:"name"`
	Status     string `json:"status"`
	CreateTime int64  `json:"create_time"`
}

type Response struct {
	Code int         `json:"code"`
	Msg  string      `json:"msg"`
	Data interface{} `json:"data,omitempty"`
}
