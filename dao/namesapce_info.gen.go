// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"k2edge/model"
)

func newNamesapceInfo(db *gorm.DB, opts ...gen.DOOption) namesapceInfo {
	_namesapceInfo := namesapceInfo{}

	_namesapceInfo.namesapceInfoDo.UseDB(db, opts...)
	_namesapceInfo.namesapceInfoDo.UseModel(&model.NamesapceInfo{})

	tableName := _namesapceInfo.namesapceInfoDo.TableName()
	_namesapceInfo.ALL = field.NewAsterisk(tableName)
	_namesapceInfo.Name = field.NewString(tableName, "name")
	_namesapceInfo.Labels = field.NewString(tableName, "labels")
	_namesapceInfo.Annotations = field.NewString(tableName, "annotations")
	_namesapceInfo.Status = field.NewString(tableName, "status")
	_namesapceInfo.CreateTime = field.NewTime(tableName, "create_time")

	_namesapceInfo.fillFieldMap()

	return _namesapceInfo
}

type namesapceInfo struct {
	namesapceInfoDo namesapceInfoDo

	ALL         field.Asterisk
	Name        field.String
	Labels      field.String
	Annotations field.String
	Status      field.String
	CreateTime  field.Time

	fieldMap map[string]field.Expr
}

func (n namesapceInfo) Table(newTableName string) *namesapceInfo {
	n.namesapceInfoDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n namesapceInfo) As(alias string) *namesapceInfo {
	n.namesapceInfoDo.DO = *(n.namesapceInfoDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *namesapceInfo) updateTableName(table string) *namesapceInfo {
	n.ALL = field.NewAsterisk(table)
	n.Name = field.NewString(table, "name")
	n.Labels = field.NewString(table, "labels")
	n.Annotations = field.NewString(table, "annotations")
	n.Status = field.NewString(table, "status")
	n.CreateTime = field.NewTime(table, "create_time")

	n.fillFieldMap()

	return n
}

func (n *namesapceInfo) WithContext(ctx context.Context) INamesapceInfoDo {
	return n.namesapceInfoDo.WithContext(ctx)
}

func (n namesapceInfo) TableName() string { return n.namesapceInfoDo.TableName() }

func (n namesapceInfo) Alias() string { return n.namesapceInfoDo.Alias() }

func (n *namesapceInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *namesapceInfo) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 5)
	n.fieldMap["name"] = n.Name
	n.fieldMap["labels"] = n.Labels
	n.fieldMap["annotations"] = n.Annotations
	n.fieldMap["status"] = n.Status
	n.fieldMap["create_time"] = n.CreateTime
}

func (n namesapceInfo) clone(db *gorm.DB) namesapceInfo {
	n.namesapceInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n namesapceInfo) replaceDB(db *gorm.DB) namesapceInfo {
	n.namesapceInfoDo.ReplaceDB(db)
	return n
}

type namesapceInfoDo struct{ gen.DO }

type INamesapceInfoDo interface {
	gen.SubQuery
	Debug() INamesapceInfoDo
	WithContext(ctx context.Context) INamesapceInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INamesapceInfoDo
	WriteDB() INamesapceInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INamesapceInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INamesapceInfoDo
	Not(conds ...gen.Condition) INamesapceInfoDo
	Or(conds ...gen.Condition) INamesapceInfoDo
	Select(conds ...field.Expr) INamesapceInfoDo
	Where(conds ...gen.Condition) INamesapceInfoDo
	Order(conds ...field.Expr) INamesapceInfoDo
	Distinct(cols ...field.Expr) INamesapceInfoDo
	Omit(cols ...field.Expr) INamesapceInfoDo
	Join(table schema.Tabler, on ...field.Expr) INamesapceInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INamesapceInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) INamesapceInfoDo
	Group(cols ...field.Expr) INamesapceInfoDo
	Having(conds ...gen.Condition) INamesapceInfoDo
	Limit(limit int) INamesapceInfoDo
	Offset(offset int) INamesapceInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INamesapceInfoDo
	Unscoped() INamesapceInfoDo
	Create(values ...*model.NamesapceInfo) error
	CreateInBatches(values []*model.NamesapceInfo, batchSize int) error
	Save(values ...*model.NamesapceInfo) error
	First() (*model.NamesapceInfo, error)
	Take() (*model.NamesapceInfo, error)
	Last() (*model.NamesapceInfo, error)
	Find() ([]*model.NamesapceInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NamesapceInfo, err error)
	FindInBatches(result *[]*model.NamesapceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NamesapceInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INamesapceInfoDo
	Assign(attrs ...field.AssignExpr) INamesapceInfoDo
	Joins(fields ...field.RelationField) INamesapceInfoDo
	Preload(fields ...field.RelationField) INamesapceInfoDo
	FirstOrInit() (*model.NamesapceInfo, error)
	FirstOrCreate() (*model.NamesapceInfo, error)
	FindByPage(offset int, limit int) (result []*model.NamesapceInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INamesapceInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n namesapceInfoDo) Debug() INamesapceInfoDo {
	return n.withDO(n.DO.Debug())
}

func (n namesapceInfoDo) WithContext(ctx context.Context) INamesapceInfoDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n namesapceInfoDo) ReadDB() INamesapceInfoDo {
	return n.Clauses(dbresolver.Read)
}

func (n namesapceInfoDo) WriteDB() INamesapceInfoDo {
	return n.Clauses(dbresolver.Write)
}

func (n namesapceInfoDo) Session(config *gorm.Session) INamesapceInfoDo {
	return n.withDO(n.DO.Session(config))
}

func (n namesapceInfoDo) Clauses(conds ...clause.Expression) INamesapceInfoDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n namesapceInfoDo) Returning(value interface{}, columns ...string) INamesapceInfoDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n namesapceInfoDo) Not(conds ...gen.Condition) INamesapceInfoDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n namesapceInfoDo) Or(conds ...gen.Condition) INamesapceInfoDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n namesapceInfoDo) Select(conds ...field.Expr) INamesapceInfoDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n namesapceInfoDo) Where(conds ...gen.Condition) INamesapceInfoDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n namesapceInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) INamesapceInfoDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n namesapceInfoDo) Order(conds ...field.Expr) INamesapceInfoDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n namesapceInfoDo) Distinct(cols ...field.Expr) INamesapceInfoDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n namesapceInfoDo) Omit(cols ...field.Expr) INamesapceInfoDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n namesapceInfoDo) Join(table schema.Tabler, on ...field.Expr) INamesapceInfoDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n namesapceInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) INamesapceInfoDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n namesapceInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) INamesapceInfoDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n namesapceInfoDo) Group(cols ...field.Expr) INamesapceInfoDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n namesapceInfoDo) Having(conds ...gen.Condition) INamesapceInfoDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n namesapceInfoDo) Limit(limit int) INamesapceInfoDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n namesapceInfoDo) Offset(offset int) INamesapceInfoDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n namesapceInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INamesapceInfoDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n namesapceInfoDo) Unscoped() INamesapceInfoDo {
	return n.withDO(n.DO.Unscoped())
}

func (n namesapceInfoDo) Create(values ...*model.NamesapceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n namesapceInfoDo) CreateInBatches(values []*model.NamesapceInfo, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n namesapceInfoDo) Save(values ...*model.NamesapceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n namesapceInfoDo) First() (*model.NamesapceInfo, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NamesapceInfo), nil
	}
}

func (n namesapceInfoDo) Take() (*model.NamesapceInfo, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NamesapceInfo), nil
	}
}

func (n namesapceInfoDo) Last() (*model.NamesapceInfo, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NamesapceInfo), nil
	}
}

func (n namesapceInfoDo) Find() ([]*model.NamesapceInfo, error) {
	result, err := n.DO.Find()
	return result.([]*model.NamesapceInfo), err
}

func (n namesapceInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NamesapceInfo, err error) {
	buf := make([]*model.NamesapceInfo, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n namesapceInfoDo) FindInBatches(result *[]*model.NamesapceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n namesapceInfoDo) Attrs(attrs ...field.AssignExpr) INamesapceInfoDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n namesapceInfoDo) Assign(attrs ...field.AssignExpr) INamesapceInfoDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n namesapceInfoDo) Joins(fields ...field.RelationField) INamesapceInfoDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n namesapceInfoDo) Preload(fields ...field.RelationField) INamesapceInfoDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n namesapceInfoDo) FirstOrInit() (*model.NamesapceInfo, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NamesapceInfo), nil
	}
}

func (n namesapceInfoDo) FirstOrCreate() (*model.NamesapceInfo, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NamesapceInfo), nil
	}
}

func (n namesapceInfoDo) FindByPage(offset int, limit int) (result []*model.NamesapceInfo, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n namesapceInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n namesapceInfoDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n namesapceInfoDo) Delete(models ...*model.NamesapceInfo) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *namesapceInfoDo) withDO(do gen.Dao) *namesapceInfoDo {
	n.DO = *do.(*gen.DO)
	return n
}
