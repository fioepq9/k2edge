// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"k2edge/model"
)

func newContainer(db *gorm.DB, opts ...gen.DOOption) container {
	_container := container{}

	_container.containerDo.UseDB(db, opts...)
	_container.containerDo.UseModel(&model.Container{})

	tableName := _container.containerDo.TableName()
	_container.ALL = field.NewAsterisk(tableName)
	_container.ID = field.NewInt64(tableName, "id")
	_container.Name = field.NewString(tableName, "name")
	_container.NodeID = field.NewInt64(tableName, "node_id")

	_container.fillFieldMap()

	return _container
}

type container struct {
	containerDo containerDo

	ALL    field.Asterisk
	ID     field.Int64
	Name   field.String
	NodeID field.Int64

	fieldMap map[string]field.Expr
}

func (c container) Table(newTableName string) *container {
	c.containerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c container) As(alias string) *container {
	c.containerDo.DO = *(c.containerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *container) updateTableName(table string) *container {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.NodeID = field.NewInt64(table, "node_id")

	c.fillFieldMap()

	return c
}

func (c *container) WithContext(ctx context.Context) IContainerDo {
	return c.containerDo.WithContext(ctx)
}

func (c container) TableName() string { return c.containerDo.TableName() }

func (c container) Alias() string { return c.containerDo.Alias() }

func (c *container) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *container) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["node_id"] = c.NodeID
}

func (c container) clone(db *gorm.DB) container {
	c.containerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c container) replaceDB(db *gorm.DB) container {
	c.containerDo.ReplaceDB(db)
	return c
}

type containerDo struct{ gen.DO }

type IContainerDo interface {
	gen.SubQuery
	Debug() IContainerDo
	WithContext(ctx context.Context) IContainerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IContainerDo
	WriteDB() IContainerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IContainerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IContainerDo
	Not(conds ...gen.Condition) IContainerDo
	Or(conds ...gen.Condition) IContainerDo
	Select(conds ...field.Expr) IContainerDo
	Where(conds ...gen.Condition) IContainerDo
	Order(conds ...field.Expr) IContainerDo
	Distinct(cols ...field.Expr) IContainerDo
	Omit(cols ...field.Expr) IContainerDo
	Join(table schema.Tabler, on ...field.Expr) IContainerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IContainerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IContainerDo
	Group(cols ...field.Expr) IContainerDo
	Having(conds ...gen.Condition) IContainerDo
	Limit(limit int) IContainerDo
	Offset(offset int) IContainerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IContainerDo
	Unscoped() IContainerDo
	Create(values ...*model.Container) error
	CreateInBatches(values []*model.Container, batchSize int) error
	Save(values ...*model.Container) error
	First() (*model.Container, error)
	Take() (*model.Container, error)
	Last() (*model.Container, error)
	Find() ([]*model.Container, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Container, err error)
	FindInBatches(result *[]*model.Container, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Container) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IContainerDo
	Assign(attrs ...field.AssignExpr) IContainerDo
	Joins(fields ...field.RelationField) IContainerDo
	Preload(fields ...field.RelationField) IContainerDo
	FirstOrInit() (*model.Container, error)
	FirstOrCreate() (*model.Container, error)
	FindByPage(offset int, limit int) (result []*model.Container, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IContainerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c containerDo) Debug() IContainerDo {
	return c.withDO(c.DO.Debug())
}

func (c containerDo) WithContext(ctx context.Context) IContainerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c containerDo) ReadDB() IContainerDo {
	return c.Clauses(dbresolver.Read)
}

func (c containerDo) WriteDB() IContainerDo {
	return c.Clauses(dbresolver.Write)
}

func (c containerDo) Session(config *gorm.Session) IContainerDo {
	return c.withDO(c.DO.Session(config))
}

func (c containerDo) Clauses(conds ...clause.Expression) IContainerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c containerDo) Returning(value interface{}, columns ...string) IContainerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c containerDo) Not(conds ...gen.Condition) IContainerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c containerDo) Or(conds ...gen.Condition) IContainerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c containerDo) Select(conds ...field.Expr) IContainerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c containerDo) Where(conds ...gen.Condition) IContainerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c containerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IContainerDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c containerDo) Order(conds ...field.Expr) IContainerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c containerDo) Distinct(cols ...field.Expr) IContainerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c containerDo) Omit(cols ...field.Expr) IContainerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c containerDo) Join(table schema.Tabler, on ...field.Expr) IContainerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c containerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IContainerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c containerDo) RightJoin(table schema.Tabler, on ...field.Expr) IContainerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c containerDo) Group(cols ...field.Expr) IContainerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c containerDo) Having(conds ...gen.Condition) IContainerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c containerDo) Limit(limit int) IContainerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c containerDo) Offset(offset int) IContainerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c containerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IContainerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c containerDo) Unscoped() IContainerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c containerDo) Create(values ...*model.Container) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c containerDo) CreateInBatches(values []*model.Container, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c containerDo) Save(values ...*model.Container) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c containerDo) First() (*model.Container, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Container), nil
	}
}

func (c containerDo) Take() (*model.Container, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Container), nil
	}
}

func (c containerDo) Last() (*model.Container, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Container), nil
	}
}

func (c containerDo) Find() ([]*model.Container, error) {
	result, err := c.DO.Find()
	return result.([]*model.Container), err
}

func (c containerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Container, err error) {
	buf := make([]*model.Container, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c containerDo) FindInBatches(result *[]*model.Container, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c containerDo) Attrs(attrs ...field.AssignExpr) IContainerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c containerDo) Assign(attrs ...field.AssignExpr) IContainerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c containerDo) Joins(fields ...field.RelationField) IContainerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c containerDo) Preload(fields ...field.RelationField) IContainerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c containerDo) FirstOrInit() (*model.Container, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Container), nil
	}
}

func (c containerDo) FirstOrCreate() (*model.Container, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Container), nil
	}
}

func (c containerDo) FindByPage(offset int, limit int) (result []*model.Container, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c containerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c containerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c containerDo) Delete(models ...*model.Container) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *containerDo) withDO(do gen.Dao) *containerDo {
	c.DO = *do.(*gen.DO)
	return c
}
