import (
	"global.api"
)
info(
	title: "worker api"
	desc: "worker api"
)

service worker-api {
	@doc(
		summary: "the version of api"
	)
	@handler Version
	get /version returns (VersionResponse)
}

type VersionResponse {
	// worker-api version
	Version string `json:"version"`
}

type CreateContainerRequest {
	ContainerName string `json:"container_name"`
	// the config of container will create and run
	Config ContainerConfig `json:"config"`
}

type CreateContainerResponse {
	ID string `json:"id"`
}

type RemoveContainerRequest {
	ID            string `json:"id"`
	RemoveVolumes bool   `json:"remove_volumnes,optional"`
	RemoveLinks   bool   `json:"remove_links,optional"`
	Force         bool   `json:"force"`
}

type StopContainerRequest {
	ID      string `json:"id"`
	Timeout int    `json:"timeout,optional"`
}

type StartContainerRequest {
	ID            string `json:"id"`
	CheckpointID  string `json:"checkpoint_id,optional"`
	CheckpointDir string `json:"checkpoint_dir,optional"`
}

type ContainerStatusRequest {
	ID string `form:"id"`
}
type ContainerStatusResponse {
	Status interface{} `json:"status"`
}

type ListContainersRequest {
	Size   bool   `form:"size,optional"`
	All    bool   `form:"all,optional"`
	Latest bool   `form:"latest,optional"`
	Since  string `form:"since,optional"`
	Before string `form:"before,optional"`
	Limit  int    `form:"limit,optional"`
}
type ListContainersResponse {
	Containers interface{} `json:"containers"`
}

type ExecRequest {
	Container string     `json:"container"`
	Config    ExecConfig `json:"config,optional"`
}
type ExecConfig {
	User         string   `json:"user,optional"`          // User that will run the command
	Privileged   bool     `json:"privileged,optional"`    // Is the container in privileged mode
	Tty          bool     `json:"tty,optional"`           // Attach standard streams to a tty.
	AttachStdin  bool     `json:"attach_stdin,optional"`  // Attach the standard input, makes possible user interaction
	AttachStderr bool     `json:"attach_stderr,optional"` // Attach the standard error
	AttachStdout bool     `json:"attach_stdout,optional"` // Attach the standard output
	Detach       bool     `json:"detach,optional"`        // Execute in detach mode
	DetachKeys   string   `json:"detach_keys,optional"`   // Escape keys for detach
	Env          []string `json:"env,optional"`           // Environment variables
	WorkingDir   string   `json:"working_dir,optional"`   // Working directory
	Cmd          []string `json:"cmd"`                    // Execution commands and args
}

type AttachRequest {
	Container string       `json:"container"`
	Config    AttachConfig `json:"config,optional"`
}
type AttachConfig {
	Stream     bool   `json:"stream"`
	Stdin      bool   `json:"stdin"`
	Stdout     bool   `json:"stdout"`
	Stderr     bool   `json:"stderr"`
	DetachKeys string `json:"detach_keys"`
	Logs       bool   `json:"logs"`
}

type NodeTopResponse {
	// 当前节点存在的镜像列表
	Images []string `json:"images"`
	// 内存
	MemoryUsed        uint64  `json:"memory_used"`
	MemoryAvailable   uint64  `json:"memory_available"`
	MemoryUsedPercent float64 `json:"memory_used_percent"`
	MemoryTotal       uint64  `json:"memory_total"`
	// 磁盘
	DiskUsed        uint64  `json:"disk_used"`
	DiskFree        uint64  `json:"disk_free"`
	DiskUsedPercent float64 `json:"disk_used_percent"`
	DiskTotal       uint64  `json:"disk_total"`
}

@server(
	middleware: AuthMiddleware
)
service worker-api {
	@doc(
		summary: "creates and starts a container"
	)
	@handler CreateContainer
	post /container/create(CreateContainerRequest) returns (CreateContainerResponse)
	@doc(
		summary: "removes the container"
	)
	@handler RemoveContainer
	post /container/remove(RemoveContainerRequest)
	@doc(
		summary: "stops any running process that is part of the container"
	)
	@handler StopContainer
	post /container/stop(StopContainerRequest)
	@doc(
		summary: "starts the container"
	)
	@handler StartContainer
	post /container/start(StartContainerRequest)
	@doc(
		summary: "the status of the container"
	)
	@handler ContainerStatus
	get /container/status(ContainerStatusRequest) returns (ContainerStatusResponse)
	@doc(
		summary: "a list of containers"
	)
	@handler ListContainers
	get /container/list(ListContainersRequest) returns (ListContainersResponse)
	
	@doc(
		summary: "runs a command in a container."
	)
	@handler Exec
	get /container/exec(ExecRequest)
	@doc(
		summary: "prepares a streaming endpoint to attach to a running container"
	)
	@handler Attach
	post /container/attach(AttachRequest)
	@doc(
		summary: "node top"
	)
	@handler NodeTop
	get /node/top returns(NodeTopResponse)
}