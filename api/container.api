import (
	"global.api"
)

@server (
	prefix: /container
)
service master-api{
	@handler CreateContainer
	post /create(CreateContainerRequest)
	
	@handler GetContainer
	get /get(GetContainerRequest) returns (GetContainerResponse)
	
	@handler ListContainer
	get /list(ListContainerRequest) returns (ListContainerResponse)
	
	@handler DeleteContainer
	post /delete(DeleteContainerRequest)
	
	@handler ApplyContainer
	post /apply(ApplyContainerRequest)
	
	@handler AttachContainer
	post /attach(AttachContainerRequest)
	
	@handler ExecContainer
	post /exec(ExecContainerRequest)
	
	@handler LogsContainer
	post /logs(LogsContainerRequest) returns (LogsContainerResponse)
	
	@handler ContainerTop
	get /top(ContainerTopRequest) returns (ContainerTopResponse)
}

type CreateContainerRequest {
	Container Container `json:"container"`
}

type GetContainerRequest {
	Namespace string `form:"namespace"`
	Name      string `form:"name"`
}

type GetContainerResponse {
	Container Container `json:"container"`
}

type ListContainerRequest {
	Namespace string `form:"namespace"`
}

type ListContainerResponse {
	ContainerSimpleInfo []ContainerSimpleInfo `json:"containers"`
}

type ContainerSimpleInfo {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Status    string `json:"status"`
	Node      string `json:"node"`
}

type DeleteContainerRequest {
	Namespace      string `json:"namespace"`
	Name           string `json:"name"`
	RemoveVolumnes bool   `json:"remove_volumns,optional"`
	RemoveLinks    bool   `json:"remoce_links,optional"`
	Force          bool   `json:"force" default:"false"`
	Timeout        int    `json:"timeout,optional"`
}

type ApplyContainerRequest {
	Container Container `json:"container"`
}

type AttachContainerRequest {
	Metadata Metadata     `json:"metadata"`
	Config   AttachConfig `json:"config,optional"`
}

type AttachConfig {
	Stream     bool   `json:"stream" default:"false"`
	Stdin      bool   `json:"stdin" default:"false"`
	Stdout     bool   `json:"stdout" default:"true"`
	Stderr     bool   `json:"stderr" default:"true"`
	DetachKeys string `json:"detach_keys" default:"ctrl-p,ctrl-q"`
	Logs       bool   `json:"logs" default:"false"`
}

type ExecContainerRequest {
	Metadata Metadata   `json:"metadata"`
	Config   ExecConfig `json:"config,optional"`
}

type ExecConfig {
	User         string   `json:"user,optional"`          // User that will run the command
	Privileged   bool     `json:"privileged,optional"`    // Is the container in privileged mode
	Tty          bool     `json:"tty,optional"`           // Attach standard streams to a tty.
	AttachStdin  bool     `json:"attach_stdin,optional"`  // Attach the standard input, makes possible user interaction
	AttachStderr bool     `json:"attach_stderr,optional"` // Attach the standard error
	AttachStdout bool     `json:"attach_stdout,optional"` // Attach the standard output
	Detach       bool     `json:"detach,optional"`        // Execute in detach mode
	DetachKeys   string   `json:"detach_keys,optional"`   // Escape keys for detach
	Env          []string `json:"env,optional"`           // Environment variables
	WorkingDir   string   `json:"working_dir,optional"`   // Working directory
	Cmd          []string `json:"cmd"`                    // Execution commands and args
}

type LogsContainerRequest {
	Todo string `json:"todo"`
}

type LogsContainerResponse {
	Todo string `json:"todo"`
}

type ContainerTopRequest {
	Selector Metadata `json:"selector"`
}

type ContainerTopResponse {
	Error Error `json:"error,omitempty"`
}