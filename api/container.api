import (
	"global.api"
)

@server (
	prefix: /container
)
service master-api{
	@handler CreateContainer
	post /create(CreateContainerRequest)
	
	@handler GetContainer
	get /get(GetContainerRequest) returns (GetContainerResponse)
	
	@handler ListContainer
	get /list(ListContainerRequest) returns (ListContainerResponse)
	
	@handler DeleteContainer
	post /delete(DeleteContainerRequest)
	
	@handler ApplyContainer
	post /apply(ApplyContainerRequest)
	
	@handler AttachContainer
	get /attach(AttachContainerRequest)
	
	@handler ExecContainer
	get /exec(ExecContainerRequest)
	
	@handler LogsContainer
	get /logs(LogsContainerRequest)
}

type CreateContainerRequest {
	Container Container `json:"container"`
}

type GetContainerRequest {
	Namespace string `form:"namespace"`
	Name      string `form:"name"`
}

type GetContainerResponse {
	Container Container `json:"container"`
}

type ListContainerRequest {
	Namespace string `form:"namespace"`
}

type ListContainerResponse {
	ContainerSimpleInfo []ContainerSimpleInfo `json:"containers"`
}

type ContainerSimpleInfo {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Status    string `json:"status"`
	Node      string `json:"node"`
}

type DeleteContainerRequest {
	Namespace      string `json:"namespace"`
	Name           string `json:"name"`
	RemoveVolumnes bool   `json:"remove_volumns,optional"`
	RemoveLinks    bool   `json:"remoce_links,optional"`
	Force          bool   `json:"force,optional"`
	Timeout        int    `json:"timeout,optional"`
}

type ApplyContainerRequest {
	Container Container `json:"container"`
}

type AttachContainerRequest {
	Namespace  string `form:"namespace"`
	Name       string `form:"name"`
	Stream     bool   `form:"stream,optional"`
	Stdin      bool   `form:"stdin,optional"`
	Stdout     bool   `form:"stdout,optional"`
	Stderr     bool   `form:"stderr,optional"`
	DetachKeys string `form:"detach_keys,optional"`
	Logs       bool   `form:"logs,optional"`
}

type ExecContainerRequest {
	Namespace    string   `form:"namespace"`
	Name         string   `form:"name"`
	User         string   `form:"user,optional"`          // User that will run the command
	Privileged   bool     `form:"privileged,optional"`    // Is the container in privileged mode
	Tty          bool     `form:"tty,optional"`           // Attach standard streams to a tty.
	AttachStdin  bool     `form:"attach_stdin,optional"`  // Attach the standard input, makes possible user interaction
	AttachStderr bool     `form:"attach_stderr,optional"` // Attach the standard error
	AttachStdout bool     `form:"attach_stdout,optional"` // Attach the standard output
	Detach       bool     `form:"detach,optional"`        // Execute in detach mode
	DetachKeys   string   `form:"detach_keys,optional"`   // Escape keys for detach
	Env          []string `form:"env,optional"`           // Environment variables
	WorkingDir   string   `form:"working_dir,optional"`   // Working directory
	Cmd          []string `form:"cmd"`                    // Execution commands and args
}

type LogsContainerRequest {
	Namespace  string `form:"namespace"`
	Name       string `form:"name"`
	Since      string `form:"since,optional"`
	Until      string `form:"until,optional"`
	Timestamps bool   `form:"timestamps,optional"`
	Follow     bool   `form:"follow,optional"`
	Tail       string `form:"tail,optional"`
	Details    bool   `form:"details,optional"`
}