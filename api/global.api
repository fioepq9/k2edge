type Metadata {
	Namespace string `json:"namespace" yaml:"namespace"`
	Kind      string `json:"kind" yaml:"kind"`
	Name      string `json:"name" yaml:"name"`
}

type Error {
	Todo string `json:"todo"`
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>> Container <<<<<<<<<<<<<<<<<<<<<<<<<<
type Container {
	Metadata        Metadata        `json:"metadata" yaml:"metadata"`
	ContainerConfig ContainerConfig `json:"container_config" yaml:"containerConfig"`
	ContainerStatus ContainerStatus `json:"container_status,optional" yaml:"containerStatus"`
}

type ContainerConfig {
	Deployment string           `json:"deployment,optional"`
	Job        string           `json:"job,optional"`
	Image      string           `json:"image" yaml:"image"`
	NodeName   string           `json:"node_name,optional" yaml:"nodeName"`
	Command    string           `json:"command,optional" yaml:"command"`
	Args       []string         `json:"args,optional" yaml:"args"`
	Expose     []ExposedPort    `json:"expose,optional" yaml:"expose"`
	Env        []string         `json:"env,optional" yaml:"env"`
	Limit      ContainerLimit   `json:"limit,optional" yaml:"limit"`
	Request    ContainerRequest `json:"request,optional" yaml:"request"`
}

type ContainerLimit {
	// 默认 5% CPU 时间(100%为1s)，单位为 纳秒
	CPU int64 `json:"cpu,default=50000000" yaml:"cpu"`
	// 默认 100 MB，单位为 B
	Memory int64 `json:"memory,default=104857600" yaml:"memory"`
}

type ContainerRequest {
	// 默认 5% CPU 时间(100%为1s)，单位为 纳秒
	CPU int64 `json:"cpu,default=50000000" yaml:"cpu"`
	// 默认 100 MB，单位为 B
	Memory int64 `json:"memory,default=104857600" yaml:"memory"`
}

type ExposedPort {
	Port     int64  `json:"port" yaml:"port"`
	Protocol string `json:"protocol" yaml:"protocol"`
	HostPort int64  `json:"host_port" yaml:"hostPort"`
}

type ContainerStatus {
	Status      string      `json:"status,optional" yaml:"status"`
	Node        string      `json:"node,optional" yaml:"node"`
	ContainerID string      `json:"container_id,optional" yaml:"containerID"`
	Info        interface{} `json:"info,optional" yaml:"info"`
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>> Job <<<<<<<<<<<<<<<<<<<<<<<<<<
type Job {
	Metadata  Metadata  `json:"metadata" yaml:"matadata"`
	Config    JobConfig `json:"config" yaml:"config"`
	Succeeded int       `json:"succeeded,optional" yaml:"succeeded"`
}

type JobConfig {
	CreateTime  int64             `json:"create_time,optional"`
	Completions int               `json:"completions" yaml:"completions"`
	Schedule    string            `json:"schedule,optional" yaml:"schedule"`
	Template    ContainerTemplate `json:"template" yaml:"template"`
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>> Deployment <<<<<<<<<<<<<<<<<<<<<<<<<<
type Deployment {
	Metadata Metadata         `json:"metadata" yaml:"metadata"`
	Config   DeploymentConfig `json:"config" yaml:"config"`
	Status   DeploymentStatus `json:"status,optional" yaml:"status"`
}

type DeploymentConfig {
	CreateTime int64             `json:"create_time,optional"`
	Replicas   int               `json:"replicas,default=1" yaml:"replicas"`
	Template   ContainerTemplate `json:"container_template" yaml:"containerTemplate"`
}

type ContainerTemplate {
	Name     string           `json:"name,optional" yaml:"name"`
	Image    string           `json:"image" yaml:"image"`
	NodeName string           `json:"node_name,optional" yaml:"nodeName"`
	Command  string           `json:"command,optional" yaml:"command"`
	Args     []string         `json:"args,optional" yaml:"args"`
	Expose   []ExposedPort    `json:"expose,optional" yaml:"expose"`
	Env      []string         `json:"env,optional" yaml:"env"`
	Limit    ContainerLimit   `json:"limit,optional" yaml:"limit"`
	Request  ContainerRequest `json:"request,optional" yaml:"request"`
}

type DeploymentStatus {
	AvailableReplicas int             `json:"available_replicas" yaml:"availableReplicas"`
	Containers        []ContainerInfo `json:"containers,optional" yaml:"containers"`
}

type ContainerInfo {
	Name        string `json:"name" yaml:"name"`
	Node        string `json:"node" yaml:"node"`
	ContainerID string `json:"containerID" yaml:"containerID"`
}
//>>>>>>>>>>>>>>>>>>>>>>>>>>> Token <<<<<<<<<<<<<<<<<<<<<<<<<<
type TokenConfig {
	Todo string `json:"todo"`
}

type TokenStatus {
	Todo string `json:"todo"`
}

type Token {
	Metadata Metadata    `json:"metadata"`
	Config   TokenConfig `json:"config"`
	Status   TokenStatus `json:"status"`
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>> Node <<<<<<<<<<<<<<<<<<<<<<<<<<
type Node {
	Metadata     Metadata `json:"metadata"`
	Roles        []string `json:"roles"`
	BaseURL      NodeURL  `json:"base_url"`
	Spec         Spec     `json:"spec"`
	RegisterTime int64    `json:"register_time"`
	Status       Status   `json:"status"`
}

type NodeURL {
	WorkerURL string `json:"worker_url" yaml:"workerUrl"`
	MasterURL string `json:"master_url" yaml:"masterUrl"`
}

type Spec {
	Unschedulable bool     `json:"unschedulable"`
	Capacity      Capacity `json:"capacity" yaml:"capacity"`
}

type Status {
	Working     bool        `json:"working"`
	Allocatable Allocatable `json:"allocatable"`
	Condition   Condition   `json:"condition"`
}

type Capacity {
	CPU    int64 `json:"cpu" yaml:"cpu"`
	Memory int64 `json:"memory" yaml:"memory"`
}

type Allocatable {
	CPU    int64 `json:"cpu"`
	Memory int64 `json:"memory"`
}

type Condition {
	Ready ConditionInfo `json:"ready"`
}

type ConditionInfo {
	Status            bool   `json:"status"`
	LastHeartbeatTime string `json:"LastHeartbeatTime"`
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>> Other <<<<<<<<<<<<<<<<<<<<<<<<<<
type Command {
	Todo string `json:"todo"`
}

type Namespace {
	Kind       string `json:"kind"`
	Name       string `json:"name"`
	Status     string `json:"status"`
	CreateTime int64  `json:"create_time"`
}