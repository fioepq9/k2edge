type Metadata {
	Namespace string `json:"namespace"`
	Kind      string `json:"kind"`
	Name      string `json:"name"`
}

type Error {
	Todo string `json:"todo"`
}

type HealthConfig {
	// Test is the test to perform to check that the container is healthy.
	// An empty slice means to inherit the default.
	// The options are:
	// {} : inherit healthcheck
	// {"NONE"} : disable healthcheck
	// {"CMD", args...} : exec arguments directly
	// {"CMD-SHELL", command} : run command with system's default shell
	Test []string `json:"test"`

	// Zero means to inherit. Durations are expressed as integer nanoseconds.
	Interval    int64 `json:"interval"`              // Interval is the time to wait between checks.
	Timeout     int64 `json:"timeout"`               // Timeout is the time to wait before considering the check to have hung.
	StartPeriod int64 `json:"start_period,optional"` // The start period for the container to initialize before the retries starts to count down.

	// Retries is the number of consecutive failures needed to consider a container as unhealthy.
	// Zero means inherit.
	Retries int `json:"retries,optional"`
}

type ContainerConfig {
	Hostname        string        `json:"hostname,optional"`         // Hostname
	Domainname      string        `json:"domainname,optional"`       // Domainname
	User            string        `json:"user,optional"`             // User that will run the command(s) inside the container, also support user:group
	AttachStdin     bool          `json:"attach_stdin,optional"`     // Attach the standard input, makes possible user interaction
	AttachStdout    bool          `json:"attach_stdout,optional"`    // Attach the standard output
	AttachStderr    bool          `json:"attach_stderr,optional"`    // Attach the standard error
	ExposedPorts    []string      `json:"exposed_ports,optional"`    // List of exposed ports
	Tty             bool          `json:"tty,optional"`              // Attach standard streams to a tty, including stdin if it is not closed.
	OpenStdin       bool          `json:"open_stdin,optional"`       // Open stdin
	StdinOnce       bool          `json:"stdin_once,optional"`       // If true, close stdin after the 1 attached client disconnects.
	Env             []string      `json:"env,optional"`              // List of environment variable to set in the container
	Cmd             []string      `json:"cmd,optional"`              // Command to run when starting the container
	Healthcheck     *HealthConfig `json:"healthcheck,optional"`      // Healthcheck describes how to check the container is healthy
	ArgsEscaped     bool          `json:"args_escaped,optional"`     // True if command is already escaped (meaning treat as a command line) (Windows specific).
	Image           string        `json:"image"`                     // Name of the image as it was passed by the operator (e.g. could be symbolic)
	Volumes         []string      `json:"volumes,optional"`          // List of volumes (mounts) used for the container
	WorkingDir      string        `json:"working_dir,optional"`      // Current directory (PWD) in the command will be launched
	Entrypoint      []string      `json:"entrypoint,optional"`       // Entrypoint to run when starting the container
	NetworkDisabled bool          `json:"network_disabled,optional"` // Is network disabled
	MacAddress      string        `json:"mac_address,optional"`      // Mac Address of the container
	OnBuild         []string      `json:"on_build,optional"`         // ONBUILD metadata that were defined on the image Dockerfile
	Labels          interface{}   `json:"labels,optional"`           // List of labels set to this container
	StopSignal      string        `json:"stop_signal,optional"`      // Signal to stop a container
	StopTimeout     int           `json:"stop_timeout,optional"`     // Timeout (in seconds) to stop a container
	Shell           []string      `json:"shell,optional"`            // Shell for shell-form of RUN, CMD, ENTRYPOINT
}

type ContainerStatus {
	Todo string `json:"todo"`
}

type Container {
	Metadata Metadata        `json:"metadata"`
	Config   ContainerConfig `json:"config"`
	Status   ContainerStatus `json:"status"`
}

type CronJobConfig {
	Todo string `json:"todo"`
}

type CronJobStatus {
	Todo string `json:"todo"`
}

type CronJob {
	Metadata Metadata      `json:"metadata"`
	Config   CronJobConfig `json:"config"`
	Status   CronJobStatus `json:"status"`
}

type DeploymentConfig {
	Todo string `json:"todo"`
}

type DeploymentStatus {
	Todo string `json:"todo"`
}

type Deployment {
	Metadata Metadata         `json:"metadata"`
	Config   DeploymentConfig `json:"config"`
	Status   DeploymentStatus `json:"status"`
}

type JobConfig {
	Todo string `json:"todo"`
}

type JobStatus {
	Todo string `json:"todo"`
}

type Job {
	Metadata Metadata  `json:"metadata"`
	Config   JobConfig `json:"config"`
	Status   JobStatus `json:"status"`
}

type TokenConfig {
	Todo string `json:"todo"`
}

type TokenStatus {
	Todo string `json:"todo"`
}

type Token {
	Metadata Metadata    `json:"metadata"`
	Config   TokenConfig `json:"config"`
	Status   TokenStatus `json:"status"`
}

type Command {
	Todo string `json:"todo"`
}

type Namespace {
	Name   string `json:"name"`
	Status string `json:"status"`
	Age    string `json:"age"`
}